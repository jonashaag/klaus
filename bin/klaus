#!/usr/bin/env python2
# coding: utf-8

import sys
import os
import argparse
import webbrowser

from dulwich.errors import NotGitRepository
from dulwich.repo import Repo

from klaus import make_app
from klaus.utils import force_unicode


def git_repository(path):
    path = os.path.abspath(path)
    if not os.path.exists(path):
        raise argparse.ArgumentTypeError('%r: No such directory' % path)
    try:
        Repo(path)
    except NotGitRepository:
        raise argparse.ArgumentTypeError('%r: Not a Git repository' % path)
    return path


def make_parser():
    parser = argparse.ArgumentParser(epilog="GemÃ¼se kaufen!")
    parser.add_argument('--host',     help="default: 127.0.0.1", default='127.0.0.1')
    parser.add_argument('--port',     help="default: 8080", default=8080, type=int)
    parser.add_argument('--site-name', help="site name showed in header. default: your hostname")
    parser.add_argument('-b', '--browser', help="open klaus in default browser on server start. Optional argument: browser executable to use",
                        default=None, const='__default_browser__', nargs='?')

    parser.add_argument('repos', help='repositories to serve or, if omitted, use current directory',
                        metavar='DIR', nargs='*', type=git_repository)

    grp = parser.add_argument_group("Git Smart HTTP")
    grp.add_argument('--smarthttp', help="enable Git Smart HTTP serving",
                     action='store_true')
    grp.add_argument('--htdigest', help="use credentials from FILE",
                     metavar="FILE", type=argparse.FileType('r'))

    grp = parser.add_argument_group("Development flags", "DO NOT USE IN PRODUCTION!")
    grp.add_argument('--debug', help="Enable Werkzeug debugger and reloader", action='store_true')

    return parser


def main():
    args = make_parser().parse_args()

    if not args.repos:
        print >> sys.stderr, "WARNING: No repositories supplied -- using current directory as default"
        args.repos = [os.getcwd()]

    if not args.site_name:
        args.site_name = '%s:%d' % (args.host, args.port)

    app = make_app(
        args.repos,
        force_unicode(args.site_name or args.host),
        args.smarthttp,
        args.htdigest
    )

    if args.browser:
        _open_browser(args)

    app.run(args.host, args.port, args.debug)

def _open_browser(args):
    # Open a web browser onto the server URL. Technically we're jumping the
    # gun a little here since the server is not yet running, but there's no
    # clean way to run a function after the server has started without
    # losing the simplicity of the code. In the Real World (TM) it'll take
    # longer for the browser to start than it will for us to start
    # serving, so we'll be OK.
    if args.browser == '__default_browser__':
        opener = webbrowser.open
    else:
        opener = webbrowser.get(args.browser).open
    opener('http://%s:%s' % (args.host, args.port))


if __name__ == '__main__':
    main()
